import discord
import asyncio
import os
import time
import datetime
from datetime import timezone, timedelta
import psutil
from discord.ext import commands

import lavalink

from tapi import (
    LOGGER,
    TOKEN,
    EXTENSIONS,
    THEME_COLOR,
    APP_BANNER_URL,
    APP_NAME_TAG_VER,
    HOST,
    PORT,
    PSW,
)
from tapi.utils.redis_manager import redis_manager


class TapiBot(commands.Bot):
    def __init__(self, shard_id=None, shard_count=None):
        intents = discord.Intents.none()
        intents.guilds = True  # For basic guild operations
        intents.voice_states = True  # For Lavalink to manage voice channels

        # ÏÉ§Îî© ÏÑ§Ï†ï
        if shard_id is not None and shard_count is not None:
            super().__init__(
                command_prefix=lambda bot, msg: [],
                intents=intents,
                shard_id=shard_id,
                shard_count=shard_count,
            )
        else:
            super().__init__(command_prefix=lambda bot, msg: [], intents=intents)

        self.lavalink = None  # ‚úÖ lavalink ÏÜçÏÑ± ÎØ∏Î¶¨ Ï†ïÏùò

    async def setup_hook(self):
        # Cog Î°úÎìú
        for extension in EXTENSIONS:
            await self.load_extension(f"tapi.modules.{extension}")

        # shard 0Ïùº ÎïåÎßå Ïä¨ÎûòÏãú ÎèôÍ∏∞Ìôî
        if getattr(self, "shard_id", None) == 0 or not hasattr(self, "shard_id"):
            await self.tree.sync()
            LOGGER.info("Slash commands synced")
        else:
            LOGGER.info("Slash command sync skipped")

    async def on_ready(self):
        if self.lavalink is None:
            self.lavalink = lavalink.Client(self.user.id)
            self.lavalink.add_node(HOST, PORT, PSW, "eu", "default-node")
            LOGGER.info("Lavalink client initialized")

        shard_info = (
            f"Shard {getattr(self, 'shard_id', 'N/A')}/{getattr(self, 'shard_count', 'N/A')}"
            if hasattr(self, "shard_id")
            else "No Sharding"
        )
        LOGGER.info(f"{APP_NAME_TAG_VER} - {shard_info}")
        LOGGER.info(f"Connected to {len(self.guilds)} guilds on {shard_info}")
        LOGGER.info(f"Bot intents: guilds={self.intents.guilds}, voice_states={self.intents.voice_states}")

        await self.change_presence(
            activity=discord.Activity(
                type=discord.ActivityType.listening, name="üé∂ music! „Éæ(ÔΩ°>Ôπè<ÔΩ°)ÔæâÔæû‚úß"
            ),
            status=discord.Status.online,
        )

        # Redis Ïó∞Í≤∞ Î∞è ÏÉ§Îìú Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
        redis_manager.connect()
        await self.update_shard_status()

        self.loop.create_task(self.status_task())
        self.loop.create_task(self.redis_update_task())

    async def status_task(self):
        await self.wait_until_ready()

        while True:
            try:
                await self.change_presence(
                    activity=discord.Activity(
                        type=discord.ActivityType.listening,
                        name="üé∂ music! „Éæ(ÔΩ°>Ôπè<ÔΩ°)ÔæâÔæû‚úß",
                    ),
                    status=discord.Status.online,
                )
                await asyncio.sleep(15)
            except Exception as e:
                LOGGER.error(f"Error in status_task: {e}")
                await asyncio.sleep(30)

    async def on_guild_join(self, guild):
        """Î¥áÏù¥ ÏÉàÎ°úÏö¥ ÏÑúÎ≤ÑÏóê Ï¥àÎåÄÎêòÏóàÏùÑ Îïå ÌôòÏòÅ Î©îÏãúÏßÄ Ï†ÑÏÜ°"""
        try:
            # ÏÑúÎ≤ÑÏóêÏÑú Î¥áÏù¥ Î©îÏãúÏßÄÎ•º Î≥¥ÎÇº Ïàò ÏûàÎäî Ï≤´ Î≤àÏß∏ Ï±ÑÎÑê Ï∞æÍ∏∞
            channel = None

            # ÏùºÎ∞ò Ï±ÑÎÑê Ï§ëÏóêÏÑú Ï∞æÍ∏∞
            for ch in guild.text_channels:
                if ch.permissions_for(guild.me).send_messages:
                    channel = ch
                    break

            # ÏãúÏä§ÌÖú Ï±ÑÎÑêÏù¥ ÏûàÎã§Î©¥ Ïö∞ÏÑ† ÏÇ¨Ïö©
            if (
                guild.system_channel
                and guild.system_channel.permissions_for(guild.me).send_messages
            ):
                channel = guild.system_channel

            if channel:
                # ÌôòÏòÅ Î©îÏãúÏßÄ embed ÏÉùÏÑ± (ÏòÅÏñ¥ ÌïòÎìúÏΩîÎî©)
                embed = discord.Embed(
                    title="OMG! Hii guys ‚úß(‚âß‚ó°‚â¶) ‚ô°",
                    description="Thank you for inviting me to hang with yall (*‚âß‚ñΩ‚â¶)\n\nType /help to view my slash commands ‚ô°",
                    color=0x7F8C8D
                )
                embed.set_image(url=APP_BANNER_URL)

                await channel.send(embed=embed)
                LOGGER.info(
                    f"Welcome message sent to guild: {guild.name} (ID: {guild.id})"
                )
            else:
                LOGGER.warning(
                    f"Could not find a suitable channel to send welcome message in guild: {guild.name} (ID: {guild.id})"
                )

        except Exception as e:
            LOGGER.error(f"Error sending welcome message to guild {guild.name}: {e}")

    async def update_shard_status(self):
        """ÌòÑÏû¨ ÏÉ§ÎìúÏùò ÏÉÅÌÉú Ï†ïÎ≥¥Î•º RedisÏóê ÏóÖÎç∞Ïù¥Ìä∏"""
        try:
            shard_id = getattr(self, "shard_id", 0)

            # Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
            process = psutil.Process()
            memory_info = process.memory_info()

            # ÌôúÏÑ± ÌîåÎ†àÏù¥Ïñ¥ Ïàò Í≥ÑÏÇ∞
            player_count = 0
            if self.lavalink:
                for guild in self.guilds:
                    player = self.lavalink.player_manager.get(guild.id)
                    if player and player.is_connected:
                        player_count += 1

            # Î†àÏù¥ÌÑ¥Ïãú Í≥ÑÏÇ∞
            latency = self.latency
            latency_ms = round(latency * 1000) if latency != float("inf") else -1

            shard_data = {
                "guild_count": len(self.guilds),
                "latency": latency_ms,
                "memory_usage": memory_info.rss,  # Resident Set Size in bytes
                "player_count": player_count,
                "timestamp": datetime.datetime.now(timezone(timedelta(hours=9))).replace(microsecond=0).isoformat(),
            }
            redis_manager.update_shard_status(shard_id, shard_data)
            LOGGER.debug(f"Updated shard {shard_id} status: {shard_data}")
        except Exception as e:
            LOGGER.error(f"Error updating shard status: {e}")

    async def redis_update_task(self):
        """Redis ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ï£ºÍ∏∞Ï†Å ÏûëÏóÖ"""
        await self.wait_until_ready()

        while True:
            try:
                await self.update_shard_status()
                await asyncio.sleep(15)  # 15Ï¥àÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏
            except Exception as e:
                LOGGER.error(f"Error in redis_update_task: {e}")
                await asyncio.sleep(60)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Ïã§ÌñâÎ∂Ä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
shard_id = os.getenv("SHARD_ID")
shard_count = os.getenv("SHARD_COUNT")

if shard_id is not None and shard_count is not None:
    shard_id = int(shard_id)
    shard_count = int(shard_count)
    LOGGER.info(f"Starting bot with shard {shard_id}/{shard_count}")

    IDENTIFY_DELAY = 5
    time.sleep(shard_id * IDENTIFY_DELAY)

    bot = TapiBot(shard_id=shard_id, shard_count=shard_count)
else:
    LOGGER.info("Starting bot without sharding")
    bot = TapiBot()

bot.run(TOKEN)
